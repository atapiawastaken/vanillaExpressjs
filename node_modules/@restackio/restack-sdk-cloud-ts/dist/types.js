import { z } from 'zod';
export const ApplicationInputSchema = z.object({
    name: z.string(),
    dockerFilePath: z.string(),
    environmentVariables: z.array(z
        .object({
        name: z.string(),
        value: z.union([z.string(), z.boolean()]).optional(),
        linkTo: z.string().optional(),
    })
        .optional()),
    dockerBuildContext: z.string().optional(),
});
export const PlanSchema = z.object({
    action: z.enum(['create', 'update', 'delete']),
    resourceType: z.enum(['Stack', 'Application']),
    changes: z.array(z.object({
        key: z.string(),
        from: z.union([z.string(), z.boolean()]).optional(),
        to: z.union([z.string(), z.boolean()]).optional(),
        value: z.union([z.string(), z.boolean(), z.null()]).optional(),
    })),
    metadata: z
        .object({
        id: z.string().optional(),
        name: z.string().optional(),
    })
        .optional(),
});
export const StackPlanSchema = z.object({
    stack: z.object({
        name: z.string(),
        previewEnabled: z.boolean(),
        plan: PlanSchema,
    }),
    applications: z.array(z.object({
        name: z.string(),
        gitUrl: z.string(),
        dockerFilePath: z.string(),
        gitBranch: z.string(),
        plan: PlanSchema,
    })),
});
export const ApplicationSchema = ApplicationInputSchema.extend({
    plan: PlanSchema,
});
export const StackSchema = z.object({
    name: z.string(),
    previewEnabled: z.boolean(),
    applications: z.array(ApplicationSchema),
    plan: PlanSchema,
});
export const CreateStackPayloadSchema = z.object({
    id: z.string(),
    name: z.string(),
    previewEnabled: z.boolean(),
});
export const StackInputSchema = z.object({
    name: z.string(),
    previewEnabled: z.boolean(),
    applications: z.array(ApplicationInputSchema),
});
export const StackPlanResponseSchema = z.object({
    stack: StackSchema,
    applications: z.array(ApplicationSchema),
});
export const DeployedApplicationSchema = z.object({
    name: z.string().optional(),
    error: z.string().optional(),
    type: z.string().optional(),
    details: z
        .array(z.object({
        connectUrl: z.string(),
    }))
        .optional(),
});
export const DeployedStackSchema = z.object({
    name: z.string(),
    error: z.string().optional(),
    applications: z.array(DeployedApplicationSchema),
});
export const DeployResponseSchema = z.object({
    stacks: z.array(DeployedStackSchema),
    stacksUrl: z.string(),
});
