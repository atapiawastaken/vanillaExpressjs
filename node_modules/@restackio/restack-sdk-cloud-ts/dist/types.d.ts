import { z } from 'zod';
export declare const ApplicationInputSchema: z.ZodObject<{
    name: z.ZodString;
    dockerFilePath: z.ZodString;
    environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>>, "many">;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    dockerFilePath: string;
    environmentVariables: ({
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    } | undefined)[];
    dockerBuildContext?: string | undefined;
}, {
    name: string;
    dockerFilePath: string;
    environmentVariables: ({
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    } | undefined)[];
    dockerBuildContext?: string | undefined;
}>;
export declare const PlanSchema: z.ZodObject<{
    action: z.ZodEnum<["create", "update", "delete"]>;
    resourceType: z.ZodEnum<["Stack", "Application"]>;
    changes: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }, {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }>, "many">;
    metadata: z.ZodOptional<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        id?: string | undefined;
    }, {
        name?: string | undefined;
        id?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    action: "create" | "update" | "delete";
    resourceType: "Stack" | "Application";
    changes: {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }[];
    metadata?: {
        name?: string | undefined;
        id?: string | undefined;
    } | undefined;
}, {
    action: "create" | "update" | "delete";
    resourceType: "Stack" | "Application";
    changes: {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }[];
    metadata?: {
        name?: string | undefined;
        id?: string | undefined;
    } | undefined;
}>;
export declare const StackPlanSchema: z.ZodObject<{
    stack: z.ZodObject<{
        name: z.ZodString;
        previewEnabled: z.ZodBoolean;
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
    }, {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
    }>;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        gitUrl: z.ZodString;
        dockerFilePath: z.ZodString;
        gitBranch: z.ZodString;
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        dockerFilePath: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        gitUrl: string;
        gitBranch: string;
    }, {
        name: string;
        dockerFilePath: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        gitUrl: string;
        gitBranch: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    stack: {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
    };
    applications: {
        name: string;
        dockerFilePath: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        gitUrl: string;
        gitBranch: string;
    }[];
}, {
    stack: {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
    };
    applications: {
        name: string;
        dockerFilePath: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        gitUrl: string;
        gitBranch: string;
    }[];
}>;
export declare const ApplicationSchema: z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodString;
    dockerFilePath: z.ZodString;
    environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>>, "many">;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
}, {
    plan: z.ZodObject<{
        action: z.ZodEnum<["create", "update", "delete"]>;
        resourceType: z.ZodEnum<["Stack", "Application"]>;
        changes: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }>, "many">;
        metadata: z.ZodOptional<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            id?: string | undefined;
        }, {
            name?: string | undefined;
            id?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    dockerFilePath: string;
    environmentVariables: ({
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    } | undefined)[];
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    dockerBuildContext?: string | undefined;
}, {
    name: string;
    dockerFilePath: string;
    environmentVariables: ({
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    } | undefined)[];
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    dockerBuildContext?: string | undefined;
}>;
export declare const StackSchema: z.ZodObject<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        dockerFilePath: z.ZodString;
        environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>>, "many">;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
    }, {
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }>, "many">;
    plan: z.ZodObject<{
        action: z.ZodEnum<["create", "update", "delete"]>;
        resourceType: z.ZodEnum<["Stack", "Application"]>;
        changes: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }>, "many">;
        metadata: z.ZodOptional<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            id?: string | undefined;
        }, {
            name?: string | undefined;
            id?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    previewEnabled: boolean;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }[];
}, {
    name: string;
    previewEnabled: boolean;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }[];
}>;
export declare const CreateStackPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    previewEnabled: boolean;
}, {
    name: string;
    id: string;
    previewEnabled: boolean;
}>;
export declare const StackInputSchema: z.ZodObject<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        dockerFilePath: z.ZodString;
        environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>>, "many">;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        dockerBuildContext?: string | undefined;
    }, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        dockerBuildContext?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        dockerBuildContext?: string | undefined;
    }[];
}, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        dockerBuildContext?: string | undefined;
    }[];
}>;
export declare const StackPlanResponseSchema: z.ZodObject<{
    stack: z.ZodObject<{
        name: z.ZodString;
        previewEnabled: z.ZodBoolean;
        applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
            name: z.ZodString;
            dockerFilePath: z.ZodString;
            environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                linkTo: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }>>, "many">;
            dockerBuildContext: z.ZodOptional<z.ZodString>;
        }, {
            plan: z.ZodObject<{
                action: z.ZodEnum<["create", "update", "delete"]>;
                resourceType: z.ZodEnum<["Stack", "Application"]>;
                changes: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                    to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                    value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }, {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }>, "many">;
                metadata: z.ZodOptional<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    id?: string | undefined;
                }, {
                    name?: string | undefined;
                    id?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            }, {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }, {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }>, "many">;
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        applications: {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }[];
    }, {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        applications: {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }[];
    }>;
    applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        dockerFilePath: z.ZodString;
        environmentVariables: z.ZodArray<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>>, "many">;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
    }, {
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }, {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    stack: {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        applications: {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }[];
    };
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }[];
}, {
    stack: {
        name: string;
        previewEnabled: boolean;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        applications: {
            name: string;
            dockerFilePath: string;
            environmentVariables: ({
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            } | undefined)[];
            plan: {
                action: "create" | "update" | "delete";
                resourceType: "Stack" | "Application";
                changes: {
                    key: string;
                    value?: string | boolean | null | undefined;
                    from?: string | boolean | undefined;
                    to?: string | boolean | undefined;
                }[];
                metadata?: {
                    name?: string | undefined;
                    id?: string | undefined;
                } | undefined;
            };
            dockerBuildContext?: string | undefined;
        }[];
    };
    applications: {
        name: string;
        dockerFilePath: string;
        environmentVariables: ({
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        } | undefined)[];
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        dockerBuildContext?: string | undefined;
    }[];
}>;
export declare const DeployedApplicationSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    details: z.ZodOptional<z.ZodArray<z.ZodObject<{
        connectUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        connectUrl: string;
    }, {
        connectUrl: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    type?: string | undefined;
    error?: string | undefined;
    details?: {
        connectUrl: string;
    }[] | undefined;
}, {
    name?: string | undefined;
    type?: string | undefined;
    error?: string | undefined;
    details?: {
        connectUrl: string;
    }[] | undefined;
}>;
export declare const DeployedStackSchema: z.ZodObject<{
    name: z.ZodString;
    error: z.ZodOptional<z.ZodString>;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        error: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        details: z.ZodOptional<z.ZodArray<z.ZodObject<{
            connectUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            connectUrl: string;
        }, {
            connectUrl: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        type?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }, {
        name?: string | undefined;
        type?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    applications: {
        name?: string | undefined;
        type?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }[];
    error?: string | undefined;
}, {
    name: string;
    applications: {
        name?: string | undefined;
        type?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }[];
    error?: string | undefined;
}>;
export declare const DeployResponseSchema: z.ZodObject<{
    stacks: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        error: z.ZodOptional<z.ZodString>;
        applications: z.ZodArray<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            error: z.ZodOptional<z.ZodString>;
            type: z.ZodOptional<z.ZodString>;
            details: z.ZodOptional<z.ZodArray<z.ZodObject<{
                connectUrl: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                connectUrl: string;
            }, {
                connectUrl: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }, {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        applications: {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }[];
        error?: string | undefined;
    }, {
        name: string;
        applications: {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }[];
        error?: string | undefined;
    }>, "many">;
    stacksUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    stacks: {
        name: string;
        applications: {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }[];
        error?: string | undefined;
    }[];
    stacksUrl: string;
}, {
    stacks: {
        name: string;
        applications: {
            name?: string | undefined;
            type?: string | undefined;
            error?: string | undefined;
            details?: {
                connectUrl: string;
            }[] | undefined;
        }[];
        error?: string | undefined;
    }[];
    stacksUrl: string;
}>;
export type ApplicationInput = z.infer<typeof ApplicationInputSchema>;
export type Plan = z.infer<typeof PlanSchema>;
export type Application = z.infer<typeof ApplicationSchema>;
export type Stack = z.infer<typeof StackSchema>;
export type CreateStackPayload = z.infer<typeof CreateStackPayloadSchema>;
export type StackInput = z.infer<typeof StackInputSchema>;
export type StackPlanResponse = z.infer<typeof StackPlanResponseSchema>;
export type DeployedApplication = z.infer<typeof DeployedApplicationSchema>;
export type DeployedStack = z.infer<typeof DeployedStackSchema>;
export type DeployResponse = z.infer<typeof DeployResponseSchema>;
//# sourceMappingURL=types.d.ts.map